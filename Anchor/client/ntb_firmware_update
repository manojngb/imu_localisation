#!/usr/bin/python

# -- TCP --
import socket
import sys

# -- imports --
import os
import re
import serial
import time
import numpy as np
import collections
import struct
import subprocess

# TCP port number
portnum = 23458

def readlines(sock, recv_buffer=64, delim='\n'):
	buffer = ''
	data = True
	while data:
		data = sock.recv(recv_buffer)
		buffer += data

		while buffer.find(delim) != -1:
			line, buffer = buffer.split('\n', 1)
			yield line
	return



# get hostname from commandline input
if len(sys.argv) != 3:
	print 'Usage: ntb_firmware_update <firmware.bin> <hostname>'
	sys.exit(1)

fw_path = sys.argv[1]
server_address = (sys.argv[2], 23458)

print '===== NTB Firmware Update: ' + sys.argv[1] + ' --> ' + sys.argv[2] +  '=====' 

# wait for ping from node
print 'contacting node...'
max_pings = 5
pings = 0
for p in range(max_pings):
	ping = subprocess.Popen(["ping", "-c", "1", sys.argv[2]], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	resp, err = ping.communicate()
	if not re.search('Unreachable', resp):
		print 'node response received...'
		break
	else:
		print 'waiting for response...'
		pings += 1
if pings == max_pings:
	print 'node not responding--aborting!'
	sys.exit(0)

# first we need to restart the node so it'll boot into the IAP sector
print 'rebooting node...'
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect(server_address)
values = (ord('C'), ord('r'), ord('0'))
packer = struct.Struct('! B B B')
packed_data = packer.pack(*values)
sock.sendall(packed_data)
sock.close()

# wait for ping from node again after rebooting
print 're-establishing connection...'
max_pings = 5
pings = 0
for p in range(max_pings):
	ping = subprocess.Popen(["ping", "-c", "1", sys.argv[2]], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	resp, err = ping.communicate()
	if not re.search('Unreachable', resp):
		print 'node response received...'
		break
	else:
		print 'waiting for response...'
		pings += 1
if pings == max_pings:
	print 'node not responding--aborting!'
	sys.exit(0)


# freeze the node in IAP mode by sending a GOTO_IAP command
print 'locking iap mode...'
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect(server_address)
values = (ord('C'), ord('i'), ord('0'))
packer = struct.Struct('! B B B')
packed_data = packer.pack(*values)
sock.sendall(packed_data)
sock.close()

# start sending the binary file over TFTP using cURL
print 'uploading binary...'
curl = subprocess.Popen(['curl', 'tftp://'+sys.argv[2], '--upload-file', sys.argv[1]], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
curl.communicate()

# we're done, boot back into application mode directly
print 'booting into application sector...'
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect(server_address)
values = (ord('C'), ord('a'), ord('0'))
packer = struct.Struct('! B B B')
packed_data = packer.pack(*values)
sock.sendall(packed_data)




		


	



